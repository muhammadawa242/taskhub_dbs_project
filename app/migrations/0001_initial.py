# Generated by Django 2.1.15 on 2023-01-16 20:33

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('addressid', models.IntegerField(db_column='AddressID', primary_key=True, serialize=False)),
                ('city', models.CharField(blank=True, db_column='City', max_length=30, null=True)),
                ('area', models.CharField(blank=True, db_column='Area', max_length=70, null=True)),
            ],
            options={
                'db_table': 'Address',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AppUsers',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('email', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'app_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField()),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=75)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Donetasks',
            fields=[
                ('taskid', models.IntegerField(db_column='TaskID', primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=300, null=True)),
                ('postdate', models.DateField(blank=True, db_column='PostDate', null=True)),
                ('donedate', models.DateField(blank=True, db_column='DoneDate', null=True)),
            ],
            options={
                'db_table': 'DoneTasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pendingtasks',
            fields=[
                ('taskid', models.IntegerField(db_column='TaskID', primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=300, null=True)),
                ('postdate', models.DateField(blank=True, db_column='PostDate', null=True)),
                ('done', models.CharField(blank=True, max_length=3, null=True)),
                ('topic', models.CharField(blank=True, db_column='Topic', max_length=100, null=True)),
                ('keydata', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'PendingTasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reports',
            fields=[
                ('report_id', models.IntegerField(db_column='Report_id', primary_key=True, serialize=False)),
                ('repdesc', models.CharField(blank=True, db_column='repDesc', max_length=200, null=True)),
                ('dateissued', models.DateField(blank=True, null=True)),
                ('kind', models.CharField(blank=True, db_column='Kind', max_length=15, null=True)),
            ],
            options={
                'db_table': 'Reports',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Routine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostelite', models.CharField(blank=True, db_column='Hostelite', max_length=3, null=True)),
                ('allnighter', models.CharField(blank=True, db_column='AllNighter', max_length=3, null=True)),
                ('aboveaveragestudent', models.CharField(blank=True, db_column='AboveAverageStudent', max_length=3, null=True)),
                ('ownvehicle', models.CharField(blank=True, db_column='OwnVehicle', max_length=3, null=True)),
            ],
            options={
                'db_table': 'Routine',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('studentid', models.IntegerField(db_column='StudentID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=100, null=True)),
                ('age', models.IntegerField(blank=True, db_column='Age', null=True)),
                ('gender', models.CharField(blank=True, db_column='Gender', max_length=6, null=True)),
                ('email', models.CharField(db_column='Email', max_length=50, unique=True)),
                ('phone', models.CharField(db_column='Phone', max_length=14, unique=True)),
                ('dp_name', models.CharField(blank=True, db_column='DP_Name', max_length=50, null=True)),
                ('blacklist', models.CharField(blank=True, db_column='Blacklist', max_length=3, null=True)),
                ('pic', models.CharField(blank=True, db_column='Pic', max_length=10, null=True)),
                ('points', models.IntegerField(blank=True, db_column='Points', null=True)),
                ('regdate', models.DateField(blank=True, db_column='regDate', null=True)),
                ('password', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'db_table': 'student',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('uniname', models.CharField(db_column='UniName', max_length=200, primary_key=True, serialize=False)),
                ('campus', models.CharField(db_column='Campus', max_length=100)),
                ('campuslocation', models.CharField(blank=True, db_column='CampusLocation', max_length=200, null=True)),
            ],
            options={
                'db_table': 'University',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hasaddress',
            fields=[
                ('studentid', models.ForeignKey(db_column='StudentID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='app.Student')),
                ('isprimaryaddress', models.CharField(blank=True, db_column='isPrimaryAddress', max_length=3, null=True)),
            ],
            options={
                'db_table': 'HasAddress',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('studentid', models.ForeignKey(db_column='StudentID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='app.Student')),
                ('points', models.IntegerField(blank=True, db_column='Points', null=True)),
                ('inmonth', models.CharField(blank=True, db_column='inMonth', max_length=10, null=True)),
                ('imageid', models.IntegerField(blank=True, db_column='imageId', null=True)),
            ],
            options={
                'db_table': 'LeaderBoard',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Perdaytasks',
            fields=[
                ('studentid', models.ForeignKey(db_column='StudentID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='app.Student')),
                ('postnum', models.IntegerField(blank=True, db_column='PostNum', null=True)),
                ('optnum', models.IntegerField(blank=True, db_column='OptNum', null=True)),
                ('donenum', models.IntegerField(blank=True, db_column='DoneNum', null=True)),
            ],
            options={
                'db_table': 'PerDayTasks',
                'managed': False,
            },
        ),
    ]
